pipeline {
    agent {
        node {
            label 'Yamix1'
        }
    }
    
    environment {
        DOCKER_IMAGE = 'makdi41/edik-museum'
        DOCKER_TAG = 'latest'  // Используем latest тег для развертывания
        APP_PORT = '5000'
        CONTAINER_NAME = 'edik-museum'
    }
    
    stages {
        stage('Prepare Environment') {
            steps {
                // Очистка старого контейнера если существует
                script {
                    sh '''
                        if docker ps -a | grep -q ${CONTAINER_NAME}; then
                            echo "Stopping and removing existing container..."
                            docker stop ${CONTAINER_NAME} || true
                            docker rm ${CONTAINER_NAME} || true
                        fi
                    '''
                }
            }
        }
        
        stage('Pull Image') {
            steps {
                // Авторизация в Docker Hub и загрузка образа
                withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                }
            }
        }

        stage('Deploy Service') {
            steps {
                script {
                    // Запуск контейнера
                    sh """
                        docker run -d \
                            --name ${CONTAINER_NAME} \
                            -p ${APP_PORT}:${APP_PORT} \
                            --restart unless-stopped \
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                    
                    // Проверка запуска и доступности
                    sh '''
                        echo "Waiting for container to start..."
                        sleep 10
                        
                        if ! docker ps | grep -q ${CONTAINER_NAME}; then
                            echo "Error: Container failed to start!"
                            exit 1
                        fi
                        
                        echo "Container is running, checking application availability..."
                        
                        # Проверка доступности приложения
                        for i in {1..12}; do
                            if curl -s http://localhost:${APP_PORT} > /dev/null; then
                                echo "Success: Application is responding on port ${APP_PORT}"
                                exit 0
                            fi
                            echo "Attempt $i: Application not responding yet, waiting..."
                            sleep 5
                        done
                        
                        echo "Error: Application failed to respond within timeout"
                        exit 1
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo """
            =========================================
            Deployment successful!
            Service: ${CONTAINER_NAME}
            Port: ${APP_PORT}
            Image: ${DOCKER_IMAGE}:${DOCKER_TAG}
            =========================================
            """
        }
        
        failure {
            script {
                echo "Deployment failed! Cleaning up..."
                sh '''
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                '''
            }
        }
        
        always {
            script {
                // Логаут из Docker Hub
                sh 'docker logout'
            }
        }
    }
} 